{"version":3,"sources":["api/api.js","components/AddForm/AddForm.js","Shapes/TodoShapes.js","components/TodoItem/TodoItem.js","components/TodosFilter/TodosFilter.js","components/TodoList/TodoList.js","components/NavFiltersLink/NavFiltersLink.js","components/TodoMenu/TodoMenu.js","components/CompleteAllCheckbox/CompleteAllCheckbox.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["todos","id","title","isCompleted","AddForm","PropTypes","number","isRequired","string","bool","onChange","onSubmit","event","className","placeholder","target","value","TodoItem","deleteTodo","completeTodo","type","checked","htmlFor","onClick","TodosFilter","pathname","filteredTodos","filter","todo","map","key","TodoList","location","NavFiltersLink","exact","to","activeClassName","TodoMenu","activeTasks","clearCompleted","completedTasks","CompleteAllCheckbox","completeAll","TodoApp","state","props","allCompleted","every","createTodo","setState","taskTitle","addTodo","preventDefault","newTodo","length","prevState","reset","taskId","changeCompletement","checkCompletement","taskCounter","isComplited","counter","forEach","activeTaskQuantity","this","completedTaskQuantity","taskQuantity","path","render","React","Component","App","todosFromServer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.339d44f5.chunk.js","sourcesContent":["export const todos = [\n  {\n    id: 1,\n    title: 'Not completed',\n    isCompleted: false,\n  },\n  {\n    id: 2,\n    title: 'Completed',\n    isCompleted: true,\n  },\n  {\n    id: 3,\n    title: 'Completed',\n    isCompleted: true,\n  },\n  {\n    id: 4,\n    title: 'Not completed',\n    isCompleted: false,\n  },\n  {\n    id: 5,\n    title: 'Not completed',\n    isCompleted: false,\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddForm = ({ onChange, onSubmit }) => (\n  <form onSubmit={event => onSubmit(event)}>\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      onChange={event => onChange(event.target.value)}\n    />\n  </form>\n);\n\nAddForm.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShapes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport { TodoShapes } from '../../Shapes/TodoShapes';\n\nexport const TodoItem = ({\n  title,\n  id,\n  isCompleted,\n  deleteTodo,\n  completeTodo,\n}) => (\n  <>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={id}\n        onChange={() => completeTodo(id)}\n        checked={isCompleted}\n      />\n      <label htmlFor=\"todo-1\">{title}</label>\n      <button\n        onClick={() => deleteTodo(id)}\n        type=\"button\"\n        className=\"destroy\"\n        id={id}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </>\n);\n\nTodoItem.propTypes = TodoShapes.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nimport { TodoShapes } from '../../Shapes/TodoShapes';\n\nexport const TodosFilter = ({ todos, deleteTodo, completeTodo, pathname }) => {\n  const isCompleted = pathname !== '/active';\n\n  const filteredTodos = todos.filter(todo => todo.isCompleted === isCompleted);\n\n  return (\n    <>\n      {filteredTodos.map(todo => (\n        <li className={todo.isCompleted ? 'completed' : ''} key={todo.id}>\n          <TodoItem\n            deleteTodo={deleteTodo}\n            title={todo.title}\n            id={todo.id}\n            completeTodo={completeTodo}\n            isCompleted={todo.isCompleted}\n          />\n        </li>\n      ))}\n    </>\n  );\n};\n\nTodosFilter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape(\n    TodoShapes,\n  )).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { shape } from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nimport { TodoShapes } from '../../Shapes/TodoShapes';\n\nexport const TodoList = ({ todos, deleteTodo, completeTodo, location }) => {\n  const { pathname } = location;\n\n  return (\n    <ul className=\"todo-list\">\n      {pathname === '/'\n        ? todos.map(todo => (\n          <li className={todo.isCompleted ? 'completed' : ''} key={todo.id}>\n            <TodoItem\n              deleteTodo={deleteTodo}\n              title={todo.title}\n              id={todo.id}\n              completeTodo={completeTodo}\n              isCompleted={todo.isCompleted}\n            />\n          </li>\n        ))\n        : (\n          <TodosFilter\n            todos={todos}\n            deleteTodo={deleteTodo}\n            completeTodo={completeTodo}\n            pathname={pathname}\n          />\n        )\n      }\n\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(shape(\n    TodoShapes,\n  )).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n    search: PropTypes.string.isRequired,\n    hash: PropTypes.string.isRequired,\n    key: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport {\n  NavLink,\n} from 'react-router-dom';\n\nexport const NavFiltersLink = () => (\n  <ul className=\"filters\">\n    <li>\n      <NavLink exact to=\"./\" activeClassName=\"selected\">All</NavLink>\n    </li>\n    <li>\n      <NavLink to=\"./active\" activeClassName=\"selected\">Active</NavLink>\n    </li>\n    <li>\n      <NavLink to=\"./completed\" activeClassName=\"selected\">Completed</NavLink>\n    </li>\n  </ul>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NavFiltersLink } from '../NavFiltersLink/NavFiltersLink';\n\nexport const TodoMenu = ({ activeTasks, clearCompleted, completedTasks }) => (\n  <>\n    <span className=\"todo-count\">\n      {`${activeTasks} items left`}\n    </span>\n\n    <NavFiltersLink />\n    {completedTasks\n      ? (\n        <button\n          onClick={clearCompleted}\n          type=\"button\"\n          className=\"clear-completed\"\n        >\n          Clear completed\n        </button>\n      )\n      : (\n        <></>\n      )\n    }\n\n  </>\n);\n\nTodoMenu.propTypes = {\n  activeTasks: PropTypes.number.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  completedTasks: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CompleteAllCheckbox = ({ completeAll }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={completeAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nCompleteAllCheckbox.propTypes = {\n  completeAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { shape } from 'prop-types';\nimport { Route } from 'react-router-dom';\n\nimport { TodoShapes } from '../../Shapes/TodoShapes';\n\nimport { AddForm } from '../AddForm/AddForm';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodoMenu } from '../TodoMenu/TodoMenu';\nimport { CompleteAllCheckbox }\n  from '../CompleteAllCheckbox/CompleteAllCheckbox';\n\nexport class TodoApp extends React.Component {\n  state = {\n    todos: [...this.props.todos],\n    allCompleted: this.props.todos.every(todo => (\n      todo.isCompleted === true\n    )),\n    isCompleted: true,\n  }\n\n  createTodo = (value) => {\n    this.setState({\n      taskTitle: value,\n    });\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n\n    const newTodo = {\n      id: this.state.todos.length + 1,\n      title: this.state.taskTitle,\n      isCompleted: false,\n    };\n\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        { ...newTodo },\n      ],\n    }));\n\n    event.target.reset();\n  }\n\n  deleteTodo = (taskId) => {\n    this.setState(prevState => (\n      {\n        todos: prevState.todos.filter(todo => todo.id !== taskId),\n      }));\n  }\n\n  changeCompletement = (taskId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== taskId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }),\n    }));\n\n    this.checkCompletement();\n  }\n\n  completeAll = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        isCompleted: !prevState.allCompleted,\n      })),\n      allCompleted: !prevState.allCompleted,\n    }));\n  }\n\n  checkCompletement = () => {\n    this.setState(prevState => ({\n      allCompleted: prevState.todos.every(todo => (\n        todo.isCompleted === true\n      )),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => (\n      {\n        todos: prevState.todos.filter(todo => todo.isCompleted !== true),\n      }));\n  }\n\n  taskCounter = (isComplited) => {\n    let counter = 0;\n\n    this.state.todos.forEach((todo) => {\n      if (todo.isCompleted === isComplited) {\n        counter += 1;\n      }\n    });\n\n    return counter;\n  }\n\n  render() {\n    const activeTaskQuantity = this.taskCounter(!this.state.isCompleted);\n    const completedTaskQuantity = this.taskCounter(this.state.isCompleted);\n    const taskQuantity = this.state.todos.length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <AddForm\n            onChange={this.createTodo}\n            onSubmit={this.addTodo}\n          />\n        </header>\n\n        <section className=\"main\">\n          <CompleteAllCheckbox completeAll={this.completeAll} />\n          <Route\n            path=\"/\"\n            render={({ location }) => (\n              <TodoList\n                location={location}\n                deleteTodo={this.deleteTodo}\n                todos={this.state.todos}\n                completeTodo={this.changeCompletement}\n              />\n            )}\n          />\n\n          {/* <ul className=\"todo-list\">\n            <li className=\"editing\">\n              <div className=\"view\">\n                <input type=\"checkbox\" className=\"toggle\" id=\"todo-3\" />\n                <label htmlFor=\"todo-3\">zxcvbnm</label>\n                <button type=\"button\" className=\"destroy\" />\n              </div>\n              <input type=\"text\" className=\"edit\" />\n            </li>\n          </ul> */}\n        </section>\n        {taskQuantity\n          ? (\n            <footer className=\"footer\">\n              <TodoMenu\n                activeTasks={activeTaskQuantity}\n                clearCompleted={this.clearCompleted}\n                completedTasks={completedTaskQuantity}\n              />\n            </footer>\n          )\n          : (<></>)\n        }\n      </section>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  todos: PropTypes.arrayOf(shape(\n    TodoShapes,\n  )).isRequired,\n};\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { todos as todosFromServer } from './api/api';\n\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <BrowserRouter>\n        <TodoApp todos={todosFromServer} />\n      </BrowserRouter>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}