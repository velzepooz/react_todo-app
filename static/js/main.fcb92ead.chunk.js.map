{"version":3,"sources":["api/api.js","components/AddForm/AddForm.js","Shapes/TodoShapes.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoMenu/TodoMenu.js","components/CompleteAllCheckbox/CompleteAllCheckbox.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["todos","id","title","isCompleted","AddForm","PropTypes","number","isRequired","string","bool","onChange","onSubmit","event","className","placeholder","target","value","TodoItem","deleteTodo","completeTodo","type","checked","htmlFor","onClick","TodoList","map","todo","key","TodoMenu","activeTasks","clearCompleted","completedTasks","exact","to","activeClassName","CompleteAllCheckbox","completeAll","TodoApp","state","props","allCompleted","every","createTodo","setState","taskTitle","addTodo","preventDefault","newTodo","length","prevState","reset","taskId","filter","changeCompletement","checkCompletement","taskCounter","isComplited","counter","forEach","todosFilter","activeTaskQuantity","this","completedTaskQuantity","taskQuantity","path","React","Component","App","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcb92ead.chunk.js","sourcesContent":["export const todos = [\n  {\n    id: 1,\n    title: 'Not completed',\n    isCompleted: false,\n  },\n  {\n    id: 2,\n    title: 'Completed',\n    isCompleted: true,\n  },\n  {\n    id: 3,\n    title: 'Completed',\n    isCompleted: true,\n  },\n  {\n    id: 4,\n    title: 'Not completed',\n    isCompleted: false,\n  },\n  {\n    id: 5,\n    title: 'Not completed',\n    isCompleted: false,\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddForm = ({ onChange, onSubmit }) => (\n  <form onSubmit={event => onSubmit(event)}>\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      onChange={event => onChange(event.target.value)}\n    />\n  </form>\n);\n\nAddForm.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShapes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport { TodoShapes } from '../../Shapes/TodoShapes';\n\nexport const TodoItem = ({\n  title,\n  id,\n  isCompleted,\n  deleteTodo,\n  completeTodo,\n}) => (\n  <>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={id}\n        onChange={() => completeTodo(id)}\n        checked={isCompleted}\n      />\n      <label htmlFor=\"todo-1\">{title}</label>\n      <button\n        onClick={() => deleteTodo(id)}\n        type=\"button\"\n        className=\"destroy\"\n        id={id}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </>\n);\n\nTodoItem.propTypes = TodoShapes.isRequired;\n","import React from 'react';\nimport PropTypes, { shape } from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nimport { TodoShapes } from '../../Shapes/TodoShapes';\n\nexport const TodoList = ({ todos, deleteTodo, completeTodo }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <li className={todo.isCompleted ? 'completed' : ''} key={todo.id}>\n        <TodoItem\n          deleteTodo={deleteTodo}\n          title={todo.title}\n          id={todo.id}\n          completeTodo={completeTodo}\n          isCompleted={todo.isCompleted}\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(shape(\n    TodoShapes,\n  )).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NavLink,\n} from 'react-router-dom';\n\nexport const TodoMenu = ({ activeTasks, clearCompleted, completedTasks }) => (\n  <>\n    <span className=\"todo-count\">\n      {`${activeTasks} items left`}\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/active\" activeClassName=\"selected\">Active</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/completed\" activeClassName=\"selected\">Completed</NavLink>\n      </li>\n    </ul>\n    {completedTasks\n      ? (\n        <button\n          onClick={clearCompleted}\n          type=\"button\"\n          className=\"clear-completed\"\n        >\n          Clear completed\n        </button>\n      )\n      : (\n        <></>\n      )\n    }\n\n  </>\n);\n\nTodoMenu.propTypes = {\n  activeTasks: PropTypes.number.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  completedTasks: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CompleteAllCheckbox = ({ completeAll }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={completeAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nCompleteAllCheckbox.propTypes = {\n  completeAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { shape } from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { TodoShapes } from '../../Shapes/TodoShapes';\n\nimport { AddForm } from '../AddForm/AddForm';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodoMenu } from '../TodoMenu/TodoMenu';\nimport { CompleteAllCheckbox }\n  from '../CompleteAllCheckbox/CompleteAllCheckbox';\n\nexport class TodoApp extends React.Component {\n  state = {\n    todos: [...this.props.todos],\n    allCompleted: this.props.todos.every(todo => (\n      todo.isCompleted === true\n    )),\n  }\n\n  createTodo = (value) => {\n    this.setState({\n      taskTitle: value,\n    });\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n\n    const newTodo = {\n      id: this.state.todos.length + 1,\n      title: this.state.taskTitle,\n      isCompleted: false,\n    };\n\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        { ...newTodo },\n      ],\n    }));\n\n    event.target.reset();\n  }\n\n  deleteTodo = (taskId) => {\n    this.setState(prevState => (\n      {\n        todos: prevState.todos.filter(todo => todo.id !== taskId),\n      }));\n  }\n\n  changeCompletement = (taskId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== taskId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }),\n    }));\n\n    this.checkCompletement();\n  }\n\n  completeAll = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        isCompleted: !prevState.allCompleted,\n      })),\n      allCompleted: !prevState.allCompleted,\n    }));\n  }\n\n  checkCompletement = () => {\n    this.setState(prevState => ({\n      allCompleted: prevState.todos.every(todo => (\n        todo.isCompleted === true\n      )),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => (\n      {\n        todos: prevState.todos.filter(todo => todo.isCompleted !== true),\n      }));\n  }\n\n  taskCounter = (isComplited = false) => {\n    let counter = 0;\n\n    this.state.todos.forEach((todo) => {\n      if (todo.isCompleted === isComplited) {\n        counter += 1;\n      }\n    });\n\n    return counter;\n  }\n\n  todosFilter = (isComplited = false) => (\n    this.state.todos.filter(todo => todo.isCompleted === isComplited)\n  )\n\n  render() {\n    const activeTaskQuantity = this.taskCounter();\n    const completedTaskQuantity = this.taskCounter(true);\n    const taskQuantity = this.state.todos.length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <AddForm\n            onChange={this.createTodo}\n            onSubmit={this.addTodo}\n          />\n        </header>\n\n        <section className=\"main\">\n          <CompleteAllCheckbox completeAll={this.completeAll} />\n          <Switch>\n            <Route path=\"/\" exact>\n              <TodoList\n                deleteTodo={this.deleteTodo}\n                todos={this.state.todos}\n                completeTodo={this.changeCompletement}\n              />\n            </Route>\n            <Route path=\"/active\">\n              <TodoList\n                deleteTodo={this.deleteTodo}\n                todos={this.todosFilter()}\n                completeTodo={this.changeCompletement}\n              />\n            </Route>\n            <Route path=\"/completed\">\n              <TodoList\n                deleteTodo={this.deleteTodo}\n                todos={this.todosFilter(true)}\n                completeTodo={this.changeCompletement}\n              />\n            </Route>\n          </Switch>\n\n          <ul className=\"todo-list\">\n            {/* <li>\n            {/* <li className=\"editing\">\n              <div className=\"view\">\n                <input type=\"checkbox\" className=\"toggle\" id=\"todo-3\" />\n                <label htmlFor=\"todo-3\">zxcvbnm</label>\n                <button type=\"button\" className=\"destroy\" />\n              </div>\n              <input type=\"text\" className=\"edit\" />\n            </li>\n\n            <li>\n              <div className=\"view\">\n                <input type=\"checkbox\" className=\"toggle\" id=\"todo-4\" />\n                <label htmlFor=\"todo-4\">1234567890</label>\n                <button type=\"button\" className=\"destroy\" />\n              </div>\n              <input type=\"text\" className=\"edit\" />\n            </li> */}\n          </ul>\n        </section>\n        {taskQuantity\n          ? (\n            <footer className=\"footer\">\n              <TodoMenu\n                activeTasks={activeTaskQuantity}\n                clearCompleted={this.clearCompleted}\n                completedTasks={completedTaskQuantity}\n              />\n            </footer>\n          )\n          : (<></>)\n        }\n      </section>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  todos: PropTypes.arrayOf(shape(\n    TodoShapes,\n  )).isRequired,\n};\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { todos as todosFromServer } from './api/api';\n\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <BrowserRouter>\n        <TodoApp todos={todosFromServer} />\n      </BrowserRouter>\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}